char boardState[5][8] = {
    {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
    {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
    {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
    {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
    {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
};


void Renderboard(void){
    cout << " _______________________________ " << endl;
    cout << "| " << boardState[4][0] << " | " << boardState [4][1] << " | " << boardState[4][2] << " | " << boardState[4][3] << " | " << boardState[4][4] << " | " << boardState[4][5] << " | " << boardState[4][6] << " | " << boardState[4][7] << " |" << endl;
    cout << "||-||___|_/_|___|___|___|___|___|" << endl;
    cout << "||" << boardState[3][7] << "|| " << boardState [3][6] << " |/" << boardState[3][5] << " | " << boardState[3][4] << " | " << boardState[3][3] << " | " << boardState[3][2] << " | " << boardState[3][1] << " | " << boardState[3][0] << " |" << endl;
    cout << "||-||___/___|___|_/_|___|___|___|" << endl;
    cout << "||" << boardState[2][0] << "|| " << boardState [2][1] << "/| " << boardState[2][2] << " | " << boardState[2][3] << " |/" << boardState[2][4] << " | " << boardState[2][5] << " | " << boardState[2][6] << " | " << boardState[2][7] << " |" << endl;
    cout << "||-||___||-||___/___|_/_|___||-||" << endl;
    cout << "| " << boardState[1][7] << " | " << boardState [1][6] << " ||" << boardState[1][5] << "|| " << boardState[1][4] << "/| " << boardState[1][3] << " |/" << boardState[1][2] << " | " << boardState[1][1] << " ||" << boardState[1][0] << "||" << endl;
    cout << "|___|___||-||___|___/___|___||-||" << endl;
    cout << "| " << boardState[0][0] << " | " << boardState [0][1] << " ||" << boardState[0][2] << "|| " << boardState[0][3] << " | " << boardState[0][4] << "/| " << boardState[0][5] << " | " << boardState[0][6] << " | " << boardState[0][7] << " |" << endl;
    cout << "|___|___||-||___|___|___|___|___|" << endl;
    
    return;
}


int reverse(){ //this allows movement of each player
    const int MAX_ROWS = 5; //determines max size of rows
    const int MAX_COLUMNS = 8; //determines max size of columns
    
    int boardPos[MAX_ROWS][MAX_COLUMNS]; //this determins the max size of array

    for(int row = 0; row <= MAX_ROWS; row++) //the code iterates from the starting position at 0 to the ending .position at 39
    {
        if ((row == 1) || (row == 3)){ 
            for(int column = MAX_COLUMNS - 1; column = 0 ; column--){ //this allows every other row to move in the opposite direction to create the snake pattern
                cout << boardPos[row][column];
            }
        }
        else{
           for( int column = 0; column <= MAX_COLUMNS ; column++){ //this allows every other row to move in the normal direction
                cout << boardPos[row][column];
           }
        }
    }
}
